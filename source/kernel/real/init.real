[org 0x1000]
[bits 64]

; Save stack
mov qword [savedStack], rsp

; Save arg for later
mov dword [arg], ebx

; Save lmode IDT
sidt [longmodeIDT]

; Save lmode GDT
sgdt [longmodeGDT]

; Load real mode IDT
lidt [realmodeIDT]

; save cr3
mov rax, cr3
mov dword [cr3Register], eax

; Load 16-bit segments
jmp far dword [pointer16]

pointer16:
    dd protectedMode16
    dw 0x28

protectedMode16:
    [bits 16]

    mov ax, 0x30
    mov ds, ax
    mov es, ax
    mov ss, ax
    mov fs, ax
    mov gs, ax

    ; Leave compatibility mode
    mov eax, cr0
    and eax, 01111111111111111111111111111110b
    mov cr0, eax

    ; leave long mode
    mov ecx, 0xC0000080
    rdmsr

    and eax, 0xFFFFFEFF
    wrmsr

    ; Load real mode segments
    jmp 0x0000:realMode

realMode:
    xor ax, ax
    mov ds, ax
    mov es, ax
    mov fs, ax
    mov gs, ax
    mov ax, 0x1000
    mov ss, ax
    mov esp, 0xFFF0

    ; Retrieve arg
    mov ebx, dword [arg]

    ; Call actual routine
    sti
    call 0x8000
    cli

    ; Load intermediate bootstrap GDT
    lgdt [GDTPointer]

    ; load cr3
    mov eax, dword [cr3Register]
    mov cr3, eax

    mov ecx, 0xC0000080
    rdmsr

    or eax, 0x00000100
    wrmsr

    ; Enter long mode
    mov eax, cr0
    or eax, 0x80000001
    mov cr0, eax

    ; Load long mode segments
    jmp 0x08:.longMode

.longMode:
    [bits 64]

    mov ax, 0x10
    mov ds, ax
    mov es, ax
    mov fs, ax
    mov gs, ax
    mov ss, ax

    ; Load lmode IDT
    lidt [longmodeIDT]

    ; Load lmode GDT
    lgdt [longmodeGDT]

    ; Restore stack
    mov rsp, qword [savedStack]

    ; Return
    ret

data:

align 4
longmodeIDT:
    dw 0
    dq 0

align 4
realmodeIDT:
    dw 0x3FF
    dq 0

align 4
longmodeGDT:
    dw 0
    dq 0

arg dd 0
cr3Register dd 0
savedStack dq 0

%include "source/kernel/real/gdtfields.inc"
